<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Full WPS Functional Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global User Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="timerLength" elementType="Argument">
            <stringProp name="Argument.name">timerLength</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="processHost" elementType="Argument">
            <stringProp name="Argument.name">processHost</stringProp>
            <stringProp name="Argument.value">${__P(processHost,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="processPort" elementType="Argument">
            <stringProp name="Argument.name">processPort</stringProp>
            <stringProp name="Argument.value">${__P(processPort,8080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="processURI" elementType="Argument">
            <stringProp name="Argument.name">processURI</stringProp>
            <stringProp name="Argument.value">${__P(processUri,/gdp-process-wps)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="utilityHost" elementType="Argument">
            <stringProp name="Argument.name">utilityHost</stringProp>
            <stringProp name="Argument.value">${__P(utilityHost,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="utilityPort" elementType="Argument">
            <stringProp name="Argument.name">utilityPort</stringProp>
            <stringProp name="Argument.value">${__P(utilityPort,8080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="utilityURI" elementType="Argument">
            <stringProp name="Argument.name">utilityURI</stringProp>
            <stringProp name="Argument.value">${__P(utilityUri,/gdp-utility-wps)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wfsHost" elementType="Argument">
            <stringProp name="Argument.name">wfsHost</stringProp>
            <stringProp name="Argument.value">${__P(wfsHost,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wfsPort" elementType="Argument">
            <stringProp name="Argument.name">wfsPort</stringProp>
            <stringProp name="Argument.value">${__P(wfsPort,8081)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wfsUsername" elementType="Argument">
            <stringProp name="Argument.name">wfsUsername</stringProp>
            <stringProp name="Argument.value">${__P(wfsUsername,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wfsPassword" elementType="Argument">
            <stringProp name="Argument.name">wfsPassword</stringProp>
            <stringProp name="Argument.value">${__P(wfsPassword,geoserver)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Delete Shapefile Thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1299702795000</longProp>
        <longProp name="ThreadGroup.end_time">1299702795000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Local Vars" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="wfsEndpoint" elementType="Argument">
              <stringProp name="Argument.name">wfsEndpoint</stringProp>
              <stringProp name="Argument.value">http://${wfsHost}:${wfsPort}/geoserver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="utilityURL" elementType="Argument">
              <stringProp name="Argument.name">utilityURL</stringProp>
              <stringProp name="Argument.value">http://${utilityHost}:${utilityPort}${utilityURI}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Delete Datastore" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${utilityURL}/WebProcessingService</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;wps:Execute service=&quot;WPS&quot; version=&quot;1.0.0&quot; xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd&quot;&gt;
	&lt;ows:Identifier&gt;gov.usgs.cida.gdp.wps.algorithm.communication.GeoserverManagementAlgorithm&lt;/ows:Identifier&gt;
	&lt;wps:DataInputs&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;command&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;delete&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;username&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;${wfsUsername}&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;	
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;password&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;${wfsPassword}&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;	
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;workspace&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;upload&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;	
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;datastore&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;jmeterTestshape_deleteme&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;		
	&lt;/wps:DataInputs&gt;
	&lt;wps:ResponseForm&gt;
		&lt;wps:ResponseDocument&gt;
			&lt;wps:Output&gt;
				&lt;ows:Identifier&gt;result&lt;/ows:Identifier&gt;
			&lt;/wps:Output&gt;
		&lt;/wps:ResponseDocument&gt;
	&lt;/wps:ResponseForm&gt;
&lt;/wps:Execute&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Delete Datastore Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="195431616">Your request has completed successfully</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Layer Deleted Test" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wfsHost}</stringProp>
          <stringProp name="HTTPSampler.port">${wfsPort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/geoserver/rest/layers.xml</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Layer Deleted Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="282638386">jmeterTestshape_deleteme</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Datastore Deleted Test" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wfsHost}</stringProp>
          <stringProp name="HTTPSampler.port">${wfsPort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/geoserver/rest/workspaces/upload/datastores.xml</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Datastore Deleted Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="282638386">jmeterTestshape_deleteme</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
