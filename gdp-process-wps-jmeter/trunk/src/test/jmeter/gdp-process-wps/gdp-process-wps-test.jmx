<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="processURL" elementType="Argument">
            <stringProp name="Argument.name">processURL</stringProp>
            <stringProp name="Argument.value">http://igsarm-cida-javadev1.er.usgs.gov:8080/gdp-process-wps</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="wfsEndpoint" elementType="Argument">
            <stringProp name="Argument.name">wfsEndpoint</stringProp>
            <stringProp name="Argument.value">http://igsarm-cida-javadev1.er.usgs.gov:8080/geoserver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timerLength" elementType="Argument">
            <stringProp name="Argument.name">timerLength</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GMO Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">4</stringProp>
        <longProp name="ThreadGroup.start_time">1294838330000</longProp>
        <longProp name="ThreadGroup.end_time">1294838330000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">This test covers our THREDDS server using a </stringProp>
      </ThreadGroup>
      <hashTree>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="SOAP/XML-RPC Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${processURL}/WebProcessingService</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;wps:Execute service=&quot;WPS&quot; version=&quot;1.0.0&quot; xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd&quot;&gt;
	&lt;ows:Identifier&gt;gov.usgs.cida.gdp.wps.algorithm.FeatureWeightedGridStatisticsAlgorithm&lt;/ows:Identifier&gt;
	&lt;wps:DataInputs&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_ATTRIBUTE_NAME&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;HUC_8&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_URI&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;dods://internal.cida.usgs.gov/thredds/dodsC/gmo/GMO_w_meta.ncml&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_ID&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;Prcp&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;TIME_START&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;1999-06-27T00:00:00.000Z&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;TIME_END&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;1999-06-27T00:00:00.000Z&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;STATISTICS&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;MEAN&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;GROUP_BY&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;STATISTIC&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DELIMITER&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;COMMA&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_COLLECTION&lt;/ows:Identifier&gt;
			&lt;wps:Reference xlink:href=&quot;http://${wfsEndpoint}/wfs&quot;&gt;
				&lt;wps:Body&gt;
					&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.1.0&quot; outputFormat=&quot;text/xml; subtype=gml/3.1.1&quot; xmlns:myns=&quot;http://www.someserver.com/myns&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs ../wfs/1.1.0/WFS.xsd&quot;&gt;
						&lt;wfs:Query typeName=&quot;sample:subbasin_alb&quot;&gt;
							&lt;wfs:PropertyName&gt;the_geom&lt;/wfs:PropertyName&gt;
							&lt;wfs:PropertyName&gt;HUC_8&lt;/wfs:PropertyName&gt;
						&lt;/wfs:Query&gt;
					&lt;/wfs:GetFeature&gt;
				&lt;/wps:Body&gt;
			&lt;/wps:Reference&gt;
		&lt;/wps:Input&gt;
	&lt;/wps:DataInputs&gt;
	&lt;wps:ResponseForm&gt;
		&lt;wps:ResponseDocument storeExecuteResponse=&quot;true&quot; status=&quot;true&quot;&gt;
			&lt;wps:Output asReference=&quot;true&quot;&gt;
				&lt;ows:Identifier&gt;OUTPUT&lt;/ows:Identifier&gt;
			&lt;/wps:Output&gt;
		&lt;/wps:ResponseDocument&gt;
	&lt;/wps:ResponseForm&gt;
&lt;/wps:Execute&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Get Status URL" enabled="true">
            <stringProp name="XPathExtractor.default">statusURL Not Found</stringProp>
            <stringProp name="XPathExtractor.refname">statusURL</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/@statusLocation</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">true</boolProp>
            <boolProp name="XPathExtractor.show_warnings">true</boolProp>
            <boolProp name="XPathExtractor.report_errors">true</boolProp>
          </XPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">statusid</stringProp>
            <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">id not found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">statusURL</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="processStatus" elementType="Argument">
              <stringProp name="Argument.name">processStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${processStatus}&quot;!=&quot;Process successful&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${processURL}/RetrieveResultServlet?${statusid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">no data url</stringProp>
              <stringProp name="XPathExtractor.refname">dataURL</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:ProcessOutputs/ns:Output/ns:Reference/@href</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">outputfileid</stringProp>
              <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">no_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">dataURL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${timerLength}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="status extractor" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">processStatus</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:Status/ns:ProcessSucceeded</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${processURL}/RetrieveResultServlet?${outputfileid}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1726520702">,03160101,03160102,03160103,03160104,03160105,03160106,03160107,03160108,03160109,03160110,03160111,03160112,03160113,03160201,03160202,03160203,03160204,03160205,ALL ATTRIBUTES
TIMESTEP,MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d),MEAN(mm/d)
27 Jun 1999 00:00:00 GMT,10.14438,10.19982,10.59650,31.13144,14.41096,21.29059,15.04279,17.61506,31.55220,33.55880,48.28661,20.57657,32.58906,23.69412,11.63241,27.89012,39.08419,14.17255,23.75016
ALL TIMESTEPS,10.14438,10.19982,10.59650,31.13144,14.41096,21.29059,15.04279,17.61506,31.55220,33.55880,48.28661,20.57657,32.58906,23.69412,11.63241,27.89012,39.08419,14.17255,23.75016
</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>false</latency>
                <timestamp>true</timestamp>
                <success>false</success>
                <label>false</label>
                <code>true</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">${__P(reportDir)}/gdp_GMO_test_result.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RFC Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">4</stringProp>
        <longProp name="ThreadGroup.start_time">1294838330000</longProp>
        <longProp name="ThreadGroup.end_time">1294838330000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="SOAP/XML-RPC Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${processURL}/WebProcessingService</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;wps:Execute service=&quot;WPS&quot; version=&quot;1.0.0&quot; xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd&quot;&gt;
	&lt;ows:Identifier&gt;gov.usgs.cida.gdp.wps.algorithm.FeatureWeightedGridStatisticsAlgorithm&lt;/ows:Identifier&gt;
	&lt;wps:DataInputs&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_ATTRIBUTE_NAME&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;ID&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_URI&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;dods://internal.cida.usgs.gov/thredds/dodsC/qpe/arfcqpe_w_meta.ncml&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_ID&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;Total_precipitation&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;TIME_START&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;2010-06-21T00:00:00.000Z&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;TIME_END&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;2010-06-23T00:00:00.000Z&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;STATISTICS&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;MEAN&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;GROUP_BY&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;STATISTIC&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DELIMITER&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;COMMA&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_COLLECTION&lt;/ows:Identifier&gt;
			&lt;wps:Reference xlink:href=&quot;http://${wfsEndpoint}/wfs&quot;&gt;
				&lt;wps:Body&gt;
					&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.1.0&quot; outputFormat=&quot;text/xml; subtype=gml/3.1.1&quot; xmlns:myns=&quot;http://www.someserver.com/myns&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs ../wfs/1.1.0/WFS.xsd&quot;&gt;
						&lt;wfs:Query typeName=&quot;sample:Yahara_alb&quot;&gt;
							&lt;wfs:PropertyName&gt;the_geom&lt;/wfs:PropertyName&gt;
							&lt;wfs:PropertyName&gt;ID&lt;/wfs:PropertyName&gt;
						&lt;/wfs:Query&gt;
					&lt;/wfs:GetFeature&gt;
				&lt;/wps:Body&gt;
			&lt;/wps:Reference&gt;
		&lt;/wps:Input&gt;
	&lt;/wps:DataInputs&gt;
	&lt;wps:ResponseForm&gt;
		&lt;wps:ResponseDocument storeExecuteResponse=&quot;true&quot; status=&quot;true&quot;&gt;
			&lt;wps:Output asReference=&quot;true&quot;&gt;
				&lt;ows:Identifier&gt;OUTPUT&lt;/ows:Identifier&gt;
			&lt;/wps:Output&gt;
		&lt;/wps:ResponseDocument&gt;
	&lt;/wps:ResponseForm&gt;
&lt;/wps:Execute&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Get Status URL" enabled="true">
            <stringProp name="XPathExtractor.default">statusURL Not Found</stringProp>
            <stringProp name="XPathExtractor.refname">statusURL</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/@statusLocation</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">true</boolProp>
          </XPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">statusid</stringProp>
            <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">id not found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">statusURL</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="processStatus" elementType="Argument">
              <stringProp name="Argument.name">processStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${processStatus}&quot;!=&quot;Process successful&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${processURL}/RetrieveResultServlet?${statusid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">no data url</stringProp>
              <stringProp name="XPathExtractor.refname">dataURL</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:ProcessOutputs/ns:Output/ns:Reference/@href</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">outputfileid</stringProp>
              <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">no_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">dataURL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${timerLength}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="status extractor" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">processStatus</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:Status/ns:ProcessSucceeded</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${processURL}//RetrieveResultServlet?${outputfileid}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1210889389">,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,ALL ATTRIBUTES
TIMESTEP,MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2),MEAN(kg/m^2)
21 Jun 2010 00:00:00 GMT,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
21 Jun 2010 06:00:00 GMT,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
21 Jun 2010 12:00:00 GMT,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.003418857,0.000000,0.01996858,0.03108420,0.000000,0.004485751,0.2728870,0.000000,0.000000,0.000000,0.03677496,0.3161562,0.000000,0.2890211,0.000000,0.07693019,0.1250000,0.1250000,0.000000,0.1250000,0.04882590,0.1250000,0.1250000,3.895823,1.919394,0.000000,0.1250000,0.1250000,2.625000,2.625000,2.625000,0.6292792,0.02697593,0.8427960,0.2727465,0.0004824827,1.500000,1.977220,4.730517,1.158613,0.7995372,1.991189,0.7666601,4.689690,6.052327,0.6674026,1.011583,2.318460,3.940249,1.154338,2.418703,0.8677001,1.827093,1.890367,1.845185,2.182570,2.302228,1.120891,3.030914,4.875000,3.469287,4.634684,4.794352,1.118524
21 Jun 2010 18:00:00 GMT,0.3750657,0.4280050,0.4684758,0.9204908,1.153565,1.455395,0.9310126,1.060688,1.629274,1.168575,1.786882,2.027546,2.065568,3.347256,2.484004,1.942159,3.227799,6.625000,4.315446,3.444835,6.625000,6.924697,6.070313,5.866655,8.125000,8.125000,5.750000,10.00000,6.913114,8.125000,8.125000,12.84510,12.80678,4.250000,4.750000,4.750000,5.125000,5.125000,5.125000,11.88502,5.895409,11.03336,5.361894,4.742188,5.250000,6.264027,3.145167,4.883606,3.704113,3.393002,3.280180,2.098172,1.366809,2.458167,2.769485,2.043673,2.758510,3.804977,6.526772,7.762501,1.768264,1.552184,2.985642,0.9504019,1.326550,5.802555,1.320538,0.2500000,1.368197,3.403621,2.875244,3.608136
22 Jun 2010 00:00:00 GMT,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
22 Jun 2010 06:00:00 GMT,26.45650,33.04435,29.88765,25.03889,19.02352,17.62868,23.04664,17.52241,22.01815,19.03784,22.37672,30.31844,15.88515,16.98228,32.25616,21.11870,30.29134,31.50000,28.07468,28.74458,31.50000,32.16668,36.66037,34.87958,31.25000,31.25000,43.12500,27.00000,32.70082,31.25000,31.25000,26.08289,26.84017,39.00000,36.25000,36.25000,34.00000,34.00000,34.00000,26.56517,36.99806,29.66500,35.79603,39.75891,35.25000,32.37848,31.75464,36.09247,37.26500,35.40035,38.25501,31.97031,28.73603,39.48551,32.86507,29.41182,24.91090,27.95143,20.18358,22.44819,42.07822,32.63112,26.62383,29.30313,32.51157,23.55464,22.36276,12.37500,20.44580,19.16867,16.83323,28.43819
22 Jun 2010 12:00:00 GMT,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
22 Jun 2010 18:00:00 GMT,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
23 Jun 2010 00:00:00 GMT,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000
ALL TIMESTEPS,2.981285,3.719150,3.372902,2.884375,2.241898,2.120453,2.664183,2.064788,2.627872,2.245158,2.687063,3.597452,1.994524,2.259336,3.890339,2.562318,3.724348,4.236111,3.602989,3.611730,4.236111,4.375600,4.747854,4.535907,4.388889,4.388889,5.430556,4.125000,4.406973,4.388889,4.388889,4.758202,4.618483,4.805556,4.569444,4.569444,4.638889,4.638889,4.638889,4.342163,4.768938,4.615685,4.603408,4.944620,4.666667,4.513303,4.403369,4.681632,4.640961,4.531615,4.700206,4.306464,4.017241,4.734564,4.071793,3.752662,3.512185,3.656749,3.236562,3.453154,5.074842,4.008186,3.494962,3.604012,4.015594,3.386454,2.968246,1.944444,2.809254,3.022998,2.722536,3.684983
</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>false</latency>
                <timestamp>true</timestamp>
                <success>false</success>
                <label>false</label>
                <code>true</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">${__P(reportDir)}/gdp_RFC_test_result.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Runoff Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">4</stringProp>
        <longProp name="ThreadGroup.start_time">1294838330000</longProp>
        <longProp name="ThreadGroup.end_time">1294838330000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="SOAP/XML-RPC Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${processURL}/WebProcessingService</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;wps:Execute service=&quot;WPS&quot; version=&quot;1.0.0&quot; xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd&quot;&gt;
	&lt;ows:Identifier&gt;gov.usgs.cida.gdp.wps.algorithm.FeatureWeightedGridStatisticsAlgorithm&lt;/ows:Identifier&gt;
	&lt;wps:DataInputs&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_ATTRIBUTE_NAME&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;HUC_8&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_URI&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;dods://runoff.cr.usgs.gov:8086/thredds/dodsC/hydro/national/2.5arcmin&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_ID&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;runoff&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;TIME_START&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;2009-07-10T00:00:00.000Z&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;TIME_END&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;2009-07-12T00:00:00.000Z&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;STATISTICS&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;MEAN&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;GROUP_BY&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;STATISTIC&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DELIMITER&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;COMMA&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_COLLECTION&lt;/ows:Identifier&gt;
			&lt;wps:Reference xlink:href=&quot;http://${wfsEndpoint}/wfs&quot;&gt;
				&lt;wps:Body&gt;
					&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.1.0&quot; outputFormat=&quot;text/xml; subtype=gml/3.1.1&quot; xmlns:myns=&quot;http://www.someserver.com/myns&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs ../wfs/1.1.0/WFS.xsd&quot;&gt;
						&lt;wfs:Query typeName=&quot;sample:HUC12LM_alb&quot;&gt;
							&lt;wfs:PropertyName&gt;the_geom&lt;/wfs:PropertyName&gt;
							&lt;wfs:PropertyName&gt;HUC_8&lt;/wfs:PropertyName&gt;
						&lt;/wfs:Query&gt;
					&lt;/wfs:GetFeature&gt;
				&lt;/wps:Body&gt;
			&lt;/wps:Reference&gt;
		&lt;/wps:Input&gt;
	&lt;/wps:DataInputs&gt;
	&lt;wps:ResponseForm&gt;
		&lt;wps:ResponseDocument storeExecuteResponse=&quot;true&quot; status=&quot;true&quot;&gt;
			&lt;wps:Output asReference=&quot;true&quot;&gt;
				&lt;ows:Identifier&gt;OUTPUT&lt;/ows:Identifier&gt;
			&lt;/wps:Output&gt;
		&lt;/wps:ResponseDocument&gt;
	&lt;/wps:ResponseForm&gt;
&lt;/wps:Execute&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Get Status URL" enabled="true">
            <stringProp name="XPathExtractor.default">statusURL Not Found</stringProp>
            <stringProp name="XPathExtractor.refname">statusURL</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/@statusLocation</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">true</boolProp>
          </XPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">statusid</stringProp>
            <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">id not found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">statusURL</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="processStatus" elementType="Argument">
              <stringProp name="Argument.name">processStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${processStatus}&quot;!=&quot;Process successful&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${processURL}/RetrieveResultServlet?${statusid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">no data url</stringProp>
              <stringProp name="XPathExtractor.refname">dataURL</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:ProcessOutputs/ns:Output/ns:Reference/@href</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">outputfileid</stringProp>
              <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">no_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">dataURL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${timerLength}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="status extractor" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">processStatus</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:Status/ns:ProcessSucceeded</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${processURL}/RetrieveResultServlet?${outputfileid}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="506138570">,04030101,04030102,04030103,04030104,04030105,04030106,04030107,04030108,04030109,04030110,04030111,04030112,04030201,04030202,04030203,04030204,04040001,04040002,04040003,04050001,04050002,04050003,04050004,04050005,04050006,04050007,04060101,04060102,04060103,04060104,04060105,04060106,04060107,ALL ATTRIBUTES
TIMESTEP,MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month),MEAN(mm/month)
14 Jun 2009 00:00:00 GMT,23.15972,20.01588,22.38408,24.75175,25.61469,24.97271,30.12694,18.87595,27.09679,33.43524,41.71366,41.47189,25.02183,21.84015,21.63358,20.95296,42.39588,48.59838,35.73486,39.28805,43.03654,39.04195,38.66337,40.00179,44.37496,41.42781,62.49085,52.62422,56.73917,53.56325,40.84975,49.46491,43.24067,36.87481
ALL TIMESTEPS,23.15972,20.01588,22.38408,24.75175,25.61469,24.97271,30.12694,18.87595,27.09679,33.43524,41.71366,41.47189,25.02183,21.84015,21.63358,20.95296,42.39588,48.59838,35.73486,39.28805,43.03654,39.04195,38.66337,40.00179,44.37496,41.42781,62.49085,52.62422,56.73917,53.56325,40.84975,49.46491,43.24067,36.87481
</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>false</latency>
                <timestamp>true</timestamp>
                <success>false</success>
                <label>false</label>
                <code>true</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">${__P(reportDir)}/gdp_RUNOFF_test_result.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NLCD Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1294838330000</longProp>
        <longProp name="ThreadGroup.end_time">1294838330000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">This test covers our THREDDS server using a </stringProp>
      </ThreadGroup>
      <hashTree>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="SOAP/XML-RPC Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${processURL}/WebProcessingService</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;wps:Execute service=&quot;WPS&quot; version=&quot;1.0.0&quot; xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd&quot;&gt;
	&lt;ows:Identifier&gt;gov.usgs.cida.gdp.wps.algorithm.FeatureCategoricalGridCoverageAlgorithm&lt;/ows:Identifier&gt;
	&lt;wps:DataInputs&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_ATTRIBUTE_NAME&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;ID&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_URI&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;http://incus.cr.usgs.gov/ArcGIS/services/NLCD_2001/MapServer/WCSServer&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_ID&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;2&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DELIMITER&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;COMMA&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_COLLECTION&lt;/ows:Identifier&gt;
			&lt;wps:Reference xlink:href=&quot;http://${wfsEndpoint}/wfs&quot;&gt;
				&lt;wps:Body&gt;
					&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.1.0&quot; outputFormat=&quot;text/xml; subtype=gml/3.1.1&quot; xmlns:myns=&quot;http://www.someserver.com/myns&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs ../wfs/1.1.0/WFS.xsd&quot;&gt;
						&lt;wfs:Query typeName=&quot;sample:trout_lake_alb&quot;&gt;
							&lt;wfs:PropertyName&gt;the_geom&lt;/wfs:PropertyName&gt;
							&lt;wfs:PropertyName&gt;ID&lt;/wfs:PropertyName&gt;
						&lt;/wfs:Query&gt;
					&lt;/wfs:GetFeature&gt;
				&lt;/wps:Body&gt;
			&lt;/wps:Reference&gt;
		&lt;/wps:Input&gt;
	&lt;/wps:DataInputs&gt;
	&lt;wps:ResponseForm&gt;
		&lt;wps:ResponseDocument storeExecuteResponse=&quot;true&quot; status=&quot;true&quot;&gt;
			&lt;wps:Output asReference=&quot;true&quot;&gt;
				&lt;ows:Identifier&gt;OUTPUT&lt;/ows:Identifier&gt;
			&lt;/wps:Output&gt;
		&lt;/wps:ResponseDocument&gt;
	&lt;/wps:ResponseForm&gt;
&lt;/wps:Execute&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Get Status URL" enabled="true">
            <stringProp name="XPathExtractor.default">statusURL Not Found</stringProp>
            <stringProp name="XPathExtractor.refname">statusURL</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/@statusLocation</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">true</boolProp>
          </XPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">statusid</stringProp>
            <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">id not found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">statusURL</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="processStatus" elementType="Argument">
              <stringProp name="Argument.name">processStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${processStatus}&quot;!=&quot;Process successful&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${processURL}/RetrieveResultServlet?${statusid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">no data url</stringProp>
              <stringProp name="XPathExtractor.refname">dataURL</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:ProcessOutputs/ns:Output/ns:Reference/@href</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">outputfileid</stringProp>
              <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">no_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">dataURL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${timerLength}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="status extractor" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">processStatus</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:Status/ns:ProcessSucceeded</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${processURL}/RetrieveResultServlet?${outputfileid}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-240231284">,Category,Category,Category,Category,Category,Category,Category,Category,Category,Category,Category,Category
Attribute,11,21,22,23,24,41,42,43,52,71,90,95,Sample Count
1,0.0,0.0,0.0,0.0,0.0,0.8547486,0.0,0.039106146,0.0,0.0,0.10614525,0.0,179
2,0.0,0.02184637,0.0,0.0,0.0,0.15362932,0.089499645,0.3488372,0.0,0.0,0.36081746,0.02536998,1419
3,0.05113425,0.1279286,0.04425437,0.005392339,0.0031610264,0.06303459,0.22089997,0.15619189,0.0013015991,0.047229454,0.25306806,0.026403867,5378
4,0.0,0.03930131,0.0,0.0,0.0,0.9213974,0.0,0.03930131,0.0,0.0,0.0,0.0,229
5,0.12026406,0.017652124,0.0,0.0,0.0,0.06902985,0.07964983,0.22258897,0.0206659,0.0,0.26880023,0.20134902,6968
6,0.07979408,0.06220506,0.0,0.0,0.0,0.43543544,0.058129556,0.22715573,0.0034320035,0.01973402,0.10703561,0.007078507,4662
7,0.014358108,0.15181588,0.005489865,0.0,0.0,0.15392737,0.19341215,0.22994088,0.0,0.0010557432,0.23902027,0.01097973,4736
8,0.02558085,0.08214034,0.0,0.0,0.0,0.2062896,0.054212626,0.3527341,0.0,0.0,0.2666041,0.012438395,4261
9,0.22834645,0.0,0.0,0.0,0.0,0.09448819,0.03937008,0.40944883,0.0,0.0,0.22834645,0.0,127
10,0.5971564,0.0047393367,0.0,0.0,0.0,0.30331755,0.018957347,0.07582939,0.0,0.0,0.0,0.0,211
11,0.60913706,0.07614213,0.0,0.0,0.0,0.08629441,0.0964467,0.11675127,0.0,0.0,0.015228426,0.0,197
12,0.0012033695,0.07300441,0.0,0.0,0.0,0.35098276,0.16887285,0.18130766,0.003208985,0.0044123544,0.21339752,0.0036101083,2493
13,0.0075400565,0.016965127,0.0,0.0,0.0,0.15457116,0.061262958,0.2921772,0.0,0.0,0.45711592,0.010367578,1061
14,0.007434944,0.08921933,0.0,0.0,0.0,0.85130113,0.0,0.05204461,0.0,0.0,0.0,0.0,269
15,0.3250961,0.12191104,0.0,0.0,0.0,0.16968699,0.04667765,0.15266337,0.0,0.0,0.18396485,0.0,1821
16,0.006002401,0.11404562,0.0,0.0,0.0,0.18607444,0.103241295,0.07803121,0.008403362,0.05882353,0.42737094,0.018007202,833
17,0.39900866,0.045848824,0.0,0.0,0.0,0.16232961,0.022304833,0.24535316,0.0,0.0,0.1251549,0.0,807
18,0.19863014,0.1849315,0.0,0.0,0.0,0.05821918,0.034246575,0.3458904,0.0,0.0,0.1780822,0.0,292
19,0.21453117,0.0736377,0.0,0.0,0.0,0.2204222,0.05891016,0.3510064,0.0,0.0,0.081492394,0.0,2037
20,0.00673989,0.08836745,0.0044932603,0.0,0.0,0.21005991,0.22316526,0.31377932,0.0,0.013729406,0.13504744,0.004618073,8012
21,0.31103584,0.04981654,0.0,0.0,0.0,0.10711262,0.1855772,0.26460627,0.00508044,0.0019757268,0.06717471,0.0076206606,7086
22,0.08416834,0.0,0.0,0.0,0.0,0.034068137,0.40681362,0.3006012,0.0,0.016032064,0.15831663,0.0,499
23,0.4868217,0.0,0.0,0.0,0.0,0.076744184,0.076744184,0.30542636,0.0,0.0,0.054263566,0.0,1290
24,0.55151516,0.023232324,0.0,0.0,0.0,0.1010101,0.04141414,0.23434344,0.0,0.0,0.048484847,0.0,990
25,0.064896755,0.040806293,0.0,0.0,0.0,0.20698132,0.24188791,0.38643068,0.003933137,0.015732547,0.039331365,0.0,2034
26,0.046703607,0.06649327,0.0,0.0,0.0,0.511478,0.07983716,0.2044555,0.0,0.029401787,0.060839083,7.915866E-4,8843
27,0.034511685,0.031875376,0.0,0.0,0.0,0.17124027,0.13241462,0.25452366,0.009586579,0.0,0.28759736,0.07825045,8345
28,0.56827587,0.0,0.0,0.0,0.0,0.12137931,0.04137931,0.20965517,0.0,0.0,0.059310343,0.0,725
29,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,64
30,0.055569887,0.022444662,0.0,0.0,0.0,0.16516176,0.04896548,0.2498839,0.0032506064,4.6437234E-4,0.3841907,0.07006863,19381
31,0.23978585,0.061707523,0.0,0.0,0.0,0.38010707,0.07044238,0.2042829,0.0,0.0,0.038884193,0.0047900816,3549
32,0.004794247,0.07790651,0.0019976029,0.0,0.0,0.29764283,0.29404715,0.22692768,0.0031961645,0.005992809,0.087095484,3.9952056E-4,2503
33,0.0,0.0,0.0,0.0,0.0,0.1826923,0.15384616,0.52884614,0.0,0.0,0.13461539,0.0,208
34,0.12653375,0.037576687,0.0,0.0,0.0,0.5245399,0.027607363,0.18328221,0.0,0.0,0.09279141,0.0076687117,1304
35,0.30499077,0.0,0.0,0.0,0.0,0.6044362,0.0,0.09057301,0.0,0.0,0.0,0.0,541
36,0.4896215,0.006105006,0.0,0.0,0.0,0.21611722,0.0,0.23809524,0.0,0.0,0.05006105,0.0,819
37,0.0,0.052197803,0.0,0.0,0.0,0.25,0.1978022,0.34615386,0.008241759,0.09615385,0.03021978,0.01923077,728
38,0.2611367,0.033794165,0.0,0.0,0.0,0.19969279,0.010752688,0.29800308,0.0122887865,0.0076804915,0.09984639,0.07680491,651
39,0.0870229,0.0030534351,0.0,0.0,0.0,0.32519084,0.035114504,0.35114503,0.0,0.0,0.07938931,0.11908397,655
40,0.122987166,0.052042007,0.0014002334,0.0,0.0,0.079113185,0.11831972,0.3050175,0.0077012833,0.028704785,0.18786465,0.09684947,4285
41,0.0501002,0.09018036,0.0,0.0,0.0,0.23046093,0.0741483,0.46092185,0.0,0.0,0.09418838,0.0,499
42,0.0,0.04721635,0.0,0.0,0.0,0.33333334,0.2896406,0.24594785,0.02184637,0.0,0.062015504,0.0,1419
43,0.3371758,0.008645534,0.0,0.0,0.0,0.030979827,0.035302594,0.12391931,0.0,0.004322767,0.45172912,0.007925072,1388
44,0.4184514,0.022240527,0.0,0.0,0.0,0.2446458,0.042009886,0.24217463,0.0,0.0,0.022240527,0.008237232,1214
45,0.0513013,0.038288288,0.0,0.0,0.0,0.5933433,0.055805806,0.20445445,0.0,0.0025025024,0.053553555,7.5075077E-4,3996
46,0.08647141,0.030683404,0.0,0.0,0.0,0.13528591,0.018131102,0.23152022,0.0,0.013947002,0.40585774,0.07810321,717
47,0.006430868,0.05573419,0.0,0.0,0.0,0.30921757,0.08494105,0.34673098,0.0,0.12968917,0.057341907,0.009914255,3732
48,0.265625,0.067708336,0.0,0.0,0.0,0.29166666,0.0,0.26041666,0.0,0.0,0.114583336,0.0,192
49,0.19909503,0.056561086,0.0,0.0,0.0,0.20135747,0.011312217,0.33031675,0.0,0.0,0.20135747,0.0,884
50,0.03888214,0.050425272,0.0,0.0,0.0,0.38092345,0.07654921,0.33718103,0.010328068,0.0,0.09234508,0.013365735,1646
51,0.0,0.082530946,0.0,0.0,0.0,0.26822558,0.4002751,0.19394773,0.0,0.023383768,0.031636864,0.0,727
52,0.3072805,0.049250536,0.0,0.0,0.0,0.2261242,0.063383296,0.20256959,0.0010706638,0.0,0.12184154,0.028479658,4670
53,0.053181387,0.034188036,0.0,0.0,0.0,0.25071225,0.041785374,0.48338082,0.0,0.0075973407,0.12440646,0.004748338,1053
54,0.123667374,0.03837953,0.0,0.0,0.0,0.5671642,0.0,0.19402985,0.0,0.0,0.07675906,0.0,469
55,0.444284,0.012274369,0.0,0.0,0.0,0.27773768,0.06666667,0.09843562,0.008182912,0.0036101083,0.07821901,0.010589651,4155
56,0.0,0.18008475,0.013771187,0.0,0.0,0.42478815,0.081567794,0.20550847,0.0,0.0,0.09427966,0.0,944
57,0.1352657,0.0,0.0,0.0,0.0,0.33091787,0.0,0.32125604,0.0,0.0,0.21256039,0.0,414
58,0.5247059,0.06117647,0.011764706,0.0,0.0,0.02117647,0.24470589,0.12941177,0.0,0.0,0.0070588235,0.0,425
59,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,70
60,0.004576659,0.059496567,0.0,0.0,0.0,0.14874142,0.018306635,0.49885583,0.0,0.0,0.27002287,0.0,437
61,0.015503876,0.010111224,0.0,0.0,0.0,0.3198517,0.037748568,0.47893494,0.0033704077,0.0,0.103134476,0.031344794,2967
62,0.07736156,0.059446253,0.0032573289,0.0,0.0,0.2019544,0.04397394,0.20358306,0.0,0.0,0.31921825,0.09120521,1228
63,0.40037245,0.13035382,0.0018621974,0.0,0.0,0.41340783,0.0,0.054003723,0.0,0.0,0.0,0.0,537
64,7.6511095E-4,0.033664882,0.0,0.0,0.0,0.23259373,0.013771997,0.48431522,0.0,0.0,0.23488906,0.0,1307
65,0.01232191,0.045822103,0.0,0.0,0.0,0.40700808,0.018867925,0.32999614,0.0,0.0,0.18598382,0.0,2597
66,0.042345278,0.07057546,0.0,0.0,0.0,0.20521173,0.04777416,0.4668838,0.0,0.0,0.16720955,0.0,921
67,0.3139535,0.034883723,0.0,0.0,0.0,0.0058139535,0.0058139535,0.25581396,0.0,0.0,0.38372093,0.0,172
68,0.040490143,0.042621203,0.0,0.0,0.0,0.45551413,0.021310601,0.40010655,0.0,0.0,0.039957378,0.0,1877
69,0.19771284,0.030241422,0.0,0.0,0.0,0.34637865,0.10317662,0.26454893,5.082592E-4,0.017280813,0.0386277,0.0015247776,3935
70,0.08171346,0.034197263,0.0,0.0,0.0,0.39920807,0.120230384,0.312455,0.0032397409,0.001799856,0.04463643,0.0025197985,2778
71,0.0,0.0,0.0,0.0,0.0,0.0,0.82608694,0.17391305,0.0,0.0,0.0,0.0,69
72,0.2393736,0.039522745,0.0,0.0,0.0,0.097688295,0.016405668,0.22445937,0.0,0.0,0.3512304,0.03131991,1341
73,0.10653105,0.09100642,0.0037473233,0.0,0.0,0.43361884,0.044700213,0.16862956,0.0048179873,0.061295502,0.062366165,0.023286939,3736
74,0.0,0.025641026,0.0,0.0,0.0,0.1982906,0.07606838,0.51794875,0.0,0.0,0.13504274,0.047008548,1170
75,0.09846154,0.0,0.0,0.0,0.0,0.23794872,0.016410256,0.22871795,0.0,0.0,0.40307692,0.015384615,975
76,0.0,0.019417476,0.0,0.0,0.0,0.0,0.1553398,0.2815534,0.0,0.0,0.44660193,0.097087376,103
77,0.0,0.0030864198,0.0,0.0,0.0,0.37037036,0.009259259,0.4814815,0.0,0.0,0.13580246,0.0,324
78,0.14452554,0.0,0.0,0.0,0.0,0.13430656,0.018978102,0.16350365,0.0,0.0,0.4569343,0.08175182,685
79,0.011034483,0.064827584,0.0,0.0,0.0,0.5627586,0.031724136,0.24689655,0.0,0.0,0.08275862,0.0,725
80,0.013438735,0.029776022,0.0,0.0,0.0,0.05322793,0.09802371,0.2674572,0.011330699,0.0,0.50092226,0.025823452,3795
81,0.78752434,0.0058479533,0.0,0.0,0.0,0.0,0.0,0.0331384,0.0,0.0,0.16374269,0.009746589,513
82,0.39937434,0.027632952,0.0,0.0,0.0,0.16319083,0.019812305,0.22471324,0.0,0.0,0.16214807,0.0031282585,1918
83,0.5536332,0.08650519,0.0,0.0,0.0,0.17301038,0.0,0.10034602,0.0,0.0,0.08650519,0.0,289
84,0.1568,0.0224,0.0,0.0,0.0,0.1968,0.0096,0.2016,0.0,0.0,0.392,0.0208,625
85,0.05608283,0.007765315,0.0,0.0,0.0,0.20793788,0.18205349,0.2502157,0.0,0.05522002,0.24072476,0.0,1159
86,0.23312883,0.1206544,0.021472393,0.0,0.0,0.14314929,0.0030674846,0.12269939,0.0,0.1400818,0.21574642,0.0,978
87,0.051136363,0.0085227275,0.0,0.0,0.0,0.11079545,0.0085227275,0.22443181,0.0,0.0,0.3125,0.2840909,352
88,0.04486252,0.09117221,0.0,0.0,0.0,0.24167873,0.047756873,0.21273516,0.0,0.0,0.35311145,0.008683068,691
89,0.2956989,0.10752688,0.0,0.0,0.0,0.28494623,0.0,0.2311828,0.0,0.0,0.08064516,0.0,186
90,0.31638116,0.0032119914,0.0,0.0,0.0,0.37526765,0.0144539615,0.11134904,0.0,0.0,0.14507495,0.03426124,1868
91,0.098143235,0.04509284,0.0,0.0,0.0,0.08222812,0.10079575,0.43501326,0.0,0.010610079,0.2281167,0.0,377
92,0.006369427,0.044585988,0.015923567,0.0,0.0,0.3375796,0.38535032,0.21019109,0.0,0.0,0.0,0.0,314
93,0.0,0.2974359,0.0,0.0,0.0,0.15384616,0.06153846,0.1948718,0.0,0.071794875,0.22051282,0.0,195
94,0.0010834236,0.10617551,0.0,0.0,0.0,0.4312026,0.10725894,0.35102925,0.0,0.0,0.0032502708,0.0,923
95,0.00990099,0.0,0.0,0.0,0.0,0.44554454,0.04950495,0.41584158,0.0,0.0,0.07920792,0.0,101
96,0.43847874,0.20134228,0.015659954,0.0,0.0,0.0,0.06263982,0.12080537,0.0,0.0,0.16107382,0.0,447
97,0.19428572,0.04,0.0,0.0,0.0,0.26857144,0.26857144,0.16571428,0.0,0.0,0.06285714,0.0,175
98,0.0,0.0,0.0,0.0,0.0,0.85714287,0.0,0.0,0.0,0.14285715,0.0,0.0,77
99,0.19095477,0.085427135,0.0,0.0,0.0,0.23187366,0.04235463,0.2275664,0.0,0.0064608757,0.21536253,0.0,1393
100,0.85714287,0.0,0.0,0.0,0.0,0.07619048,0.0,0.028571429,0.0,0.0,0.03809524,0.0,105
101,0.009063444,0.03021148,0.0,0.0,0.0,0.003021148,0.09969789,0.26586103,0.0,0.0,0.5528701,0.039274924,331
102,0.78923285,0.03581516,0.0017512145,0.0,0.0,0.055925883,0.034798328,0.04976839,4.5192635E-4,0.0020336686,0.02864083,0.0015817422,17702
103,0.12476548,0.09756097,0.0,0.0,0.0,0.4380863,0.069418386,0.19512194,0.0,0.0,0.075046904,0.0,1066
104,0.06978254,0.031483285,8.1142486E-4,0.0,0.0,0.33154818,0.17039922,0.25981823,0.005193119,0.0032456995,0.123498864,0.004219409,6162
105,0.41983697,0.05706522,0.0,0.0,0.0,0.24048913,0.07472826,0.20788044,0.0,0.0,0.0,0.0,736
106,0.1174569,0.082974136,0.0,0.0,0.0,0.5021552,0.09375,0.18534483,0.0,0.0,0.018318966,0.0,928
107,0.38990825,0.06995413,0.0,0.0,0.0,0.1261468,0.17316514,0.19495413,0.0,0.005733945,0.040137615,0.0,872
108,0.63484776,0.01643306,0.0,0.0,0.0,0.14475591,0.042532623,0.104639925,0.0,0.0,0.054374095,0.0024166263,4138
109,0.027508091,0.026699029,0.0,0.0,0.0,0.6039644,0.046925567,0.21521036,0.0,0.0,0.07847896,0.0012135922,2472
110,0.5745258,0.21409214,0.016260162,0.0,0.0,0.01897019,0.0,0.11924119,0.0,0.0,0.05691057,0.0,738
111,0.104177974,0.017362995,0.0,0.0,0.0,0.25122082,0.12208356,0.23277265,0.0021703744,0.0,0.25013566,0.020075964,1843
112,0.011363637,0.044143356,0.0,0.0,0.0,0.14423077,0.15821679,0.2910839,0.0013111888,0.0,0.34571677,0.0039335666,2288
113,0.036697246,0.3853211,0.0,0.0,0.0,0.10091743,0.04587156,0.43119267,0.0,0.0,0.0,0.0,109
114,0.4925761,0.058277655,0.0040831477,0.0,0.0,0.12880476,0.1481069,0.11989606,0.0,0.005939124,0.040089086,0.0022271716,2694
115,0.018003274,0.119476266,0.0,0.0,0.0,0.022913257,0.117839605,0.27332243,0.0,0.0,0.40752864,0.04091653,611
116,0.22444445,0.2711111,0.0,0.0,0.0,0.10888889,0.015555556,0.24222222,0.0,0.035555556,0.07333333,0.028888889,450
117,0.1625,0.04375,0.0,0.0,0.0,0.0,0.45625,0.23125,0.0,0.0,0.10625,0.0,160
118,0.3556701,0.12886597,0.0,0.0,0.0,0.26804122,0.0,0.14948453,0.0,0.0,0.09793814,0.0,194
119,0.032941177,0.0,0.0,0.0,0.0,0.0,0.20705882,0.12235294,0.0,0.0,0.5435294,0.09411765,425
120,0.06341312,0.058750387,0.006527821,0.0,0.0,0.34628537,0.053465962,0.18308984,0.0,0.0,0.28846753,0.0,3217
121,0.2889734,0.19011407,0.0,0.0,0.0,0.117870726,0.03041825,0.35361215,0.0,0.0,0.019011406,0.0,263
122,0.0,0.09859155,0.0,0.0,0.0,0.07746479,0.19014084,0.4225352,0.0,0.0,0.2112676,0.0,142
123,0.038613245,0.0977787,0.0,0.0,0.0,0.4143658,0.13203238,0.2065601,0.0014531866,0.0053975503,0.09383433,0.009964708,4817
124,0.10589711,0.09611041,0.005520703,0.0,0.0,0.24366374,0.06951067,0.2855709,0.0,0.0,0.18996236,0.0037641155,3985
125,0.53069806,0.0050462573,0.0,0.0,0.0,0.08494533,0.11269975,0.2371741,0.0,0.0,0.026913373,0.0025231286,1189
126,0.059509918,0.047841307,0.0,0.0,0.0,0.49591598,0.017502917,0.15985997,0.01983664,0.11435239,0.054842472,0.03033839,857
127,0.071698114,0.0,0.0,0.0,0.0,0.6226415,0.04528302,0.25283018,0.0,0.0,0.00754717,0.0,265
128,0.1253796,0.07071584,0.0047722342,0.0,0.0,0.2229935,0.18806942,0.23101953,0.0017353579,0.0,0.14902386,0.0062906723,4610
129,0.0,0.025041737,0.0,0.0,0.0,0.9215359,0.0,0.050083473,0.0,0.0,0.003338898,0.0,599
130,0.08083832,0.07185629,0.0,0.0,0.0,0.51197606,0.035928145,0.19161677,0.0,0.0,0.10778443,0.0,334
131,0.0,0.0,0.0,0.0,0.0,0.6164383,0.01369863,0.369863,0.0,0.0,0.0,0.0,73
132,0.6460177,0.048672568,0.0,0.0,0.0,0.084070794,0.044247787,0.1460177,0.0,0.0,0.030973451,0.0,452
133,0.15736821,0.07425933,0.0,0.0,0.0,0.46094653,0.050404,0.1839169,0.003078107,0.0,0.070026934,0.0,2599
134,0.0,0.06435644,0.0,0.0,0.0,0.81023103,0.0,0.12541254,0.0,0.0,0.0,0.0,606
135,0.10280374,0.064382136,0.0,0.0,0.0,0.5555556,0.048805814,0.18380062,0.0,0.0,0.04465213,0.0,963
136,0.092150174,0.04957338,0.0015358361,0.0,0.0,0.2532423,0.13899317,0.29590443,0.0046075084,0.0,0.13916382,0.024829352,11720
137,0.038033396,0.038497217,0.0,0.0,0.0,0.68784785,0.008348794,0.17717996,0.0,0.0,0.050092764,0.0,2156
138,0.18769912,0.10915639,0.009973681,0.0,0.0,0.34630835,0.039063584,0.24407813,0.0,0.0,0.06372074,0.0,7219
139,0.056994345,0.040762357,0.0,0.0,0.0,0.27329928,0.06128032,0.2793179,0.0,0.0070217033,0.26180923,0.019514864,10966
140,0.0,0.15789473,0.0,0.0,0.0,0.46616542,0.0,0.30827066,0.0,0.0,0.067669176,0.0,133
141,0.01599064,0.082293294,7.800312E-4,0.0,0.0,0.26911077,0.097893916,0.46645865,0.0,0.0,0.0674727,0.0,2564
142,0.0,0.033641405,0.0,0.0,0.0,0.42292053,0.093160816,0.29205176,0.0,0.0,0.14085028,0.01737523,2705
143,0.0,0.0299639,0.0,0.0,0.0,0.46931407,0.055234656,0.38736463,0.0032490974,0.0,0.054873645,0.0,2770
144,0.0,0.045366794,0.0,0.0,0.0,0.7239382,0.053088803,0.15926641,0.0,0.0,0.018339768,0.0,1036
145,0.10621062,0.031503152,0.0,0.0,0.0,0.5427543,0.01170117,0.19621962,0.0,0.0,0.09720972,0.0144014405,1111
146,0.037348587,0.033647377,0.0,0.0,0.0,0.5925303,0.04306864,0.21567968,0.0,0.0,0.07772544,0.0,2972
147,0.056311347,0.050456345,0.0,0.0,0.0,0.6018598,0.032891337,0.20027553,0.0,0.0012054417,0.054761495,0.0022386773,5807
148,0.1447422,0.07366429,0.0082141915,0.0011016116,1.4368848E-4,0.22551908,0.15147161,0.26606318,0.01135139,0.011399287,0.09900136,0.0073281126,41757
</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>false</latency>
                <timestamp>true</timestamp>
                <success>false</success>
                <label>false</label>
                <code>true</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">${__P(reportDir)}/gdp_NLCD_test_result.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>false</success>
              <label>false</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NED Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1294838330000</longProp>
        <longProp name="ThreadGroup.end_time">1294838330000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">This test covers our THREDDS server using a </stringProp>
      </ThreadGroup>
      <hashTree>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="SOAP/XML-RPC Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${processURL}/WebProcessingService</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;wps:Execute service=&quot;WPS&quot; version=&quot;1.0.0&quot; xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsExecute_request.xsd&quot;&gt;
	&lt;ows:Identifier&gt;gov.usgs.cida.gdp.wps.algorithm.FeatureWeightedGridStatisticsAlgorithm&lt;/ows:Identifier&gt;
	&lt;wps:DataInputs&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_ATTRIBUTE_NAME&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;ID&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_URI&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;http://incus.cr.usgs.gov/ArcGIS/services/NED_1/MapServer/WCSServer&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DATASET_ID&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;1&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;STATISTICS&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;MEAN&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;GROUP_BY&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;STATISTIC&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;DELIMITER&lt;/ows:Identifier&gt;
			&lt;wps:Data&gt;
				&lt;wps:LiteralData&gt;COMMA&lt;/wps:LiteralData&gt;
			&lt;/wps:Data&gt;
		&lt;/wps:Input&gt;
		&lt;wps:Input&gt;
			&lt;ows:Identifier&gt;FEATURE_COLLECTION&lt;/ows:Identifier&gt;
			&lt;wps:Reference xlink:href=&quot;http://${wfsEndpoint}/wfs&quot;&gt;
				&lt;wps:Body&gt;
					&lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;1.1.0&quot; outputFormat=&quot;text/xml; subtype=gml/3.1.1&quot; xmlns:myns=&quot;http://www.someserver.com/myns&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs ../wfs/1.1.0/WFS.xsd&quot;&gt;
						&lt;wfs:Query typeName=&quot;sample:Yahara_alb&quot;&gt;
							&lt;wfs:PropertyName&gt;the_geom&lt;/wfs:PropertyName&gt;
							&lt;wfs:PropertyName&gt;ID&lt;/wfs:PropertyName&gt;
						&lt;/wfs:Query&gt;
					&lt;/wfs:GetFeature&gt;
				&lt;/wps:Body&gt;
			&lt;/wps:Reference&gt;
		&lt;/wps:Input&gt;
	&lt;/wps:DataInputs&gt;
	&lt;wps:ResponseForm&gt;
		&lt;wps:ResponseDocument storeExecuteResponse=&quot;true&quot; status=&quot;true&quot;&gt;
			&lt;wps:Output asReference=&quot;true&quot;&gt;
				&lt;ows:Identifier&gt;OUTPUT&lt;/ows:Identifier&gt;
			&lt;/wps:Output&gt;
		&lt;/wps:ResponseDocument&gt;
	&lt;/wps:ResponseForm&gt;
&lt;/wps:Execute&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Get Status URL" enabled="true">
            <stringProp name="XPathExtractor.default">statusURL Not Found</stringProp>
            <stringProp name="XPathExtractor.refname">statusURL</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/@statusLocation</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">true</boolProp>
          </XPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Response ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">statusid</stringProp>
            <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">id not found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">statusURL</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="processStatus" elementType="Argument">
              <stringProp name="Argument.name">processStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${processStatus}&quot;!=&quot;Process successful&quot;)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${processURL}/RetrieveResultServlet?${statusid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">no data url</stringProp>
              <stringProp name="XPathExtractor.refname">dataURL</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:ProcessOutputs/ns:Output/ns:Reference/@href</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">outputfileid</stringProp>
              <stringProp name="RegexExtractor.regex">id=(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">no_id</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">dataURL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${timerLength}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="status extractor" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">processStatus</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/ns:ExecuteResponse/ns:Status/ns:ProcessSucceeded</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">true</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">http://${__P(testHost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(testPort)}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${processURL}/RetrieveResultServlet?${outputfileid}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1084315887">,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,ALL ATTRIBUTES
,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN,MEAN
,312.1058,313.5239,312.7684,302.3553,290.1619,298.1148,303.4729,313.8659,303.3233,306.7019,277.1836,294.9057,324.6847,296.8063,268.0709,285.7580,270.0608,275.7979,285.7277,307.8769,258.3086,278.8308,282.5335,270.2900,257.7779,257.0207,279.9781,258.0606,273.8338,256.9980,257.0352,316.7712,301.0087,301.1799,256.9985,257.6459,257.4421,257.9976,257.3230,283.6038,280.1987,274.9559,269.7210,282.3531,257.2084,279.1272,281.4946,265.3892,271.6104,269.1219,273.4797,281.8326,306.0738,282.8086,278.7539,290.6979,295.5579,284.3216,308.8303,290.4718,273.6502,267.3298,274.2853,267.5999,261.8371,290.2592,272.3313,304.4818,285.3839,262.4103,275.0264,286.5397
</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>false</latency>
                <timestamp>true</timestamp>
                <success>false</success>
                <label>false</label>
                <code>true</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">${__P(reportDir)}</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>false</success>
              <label>false</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
